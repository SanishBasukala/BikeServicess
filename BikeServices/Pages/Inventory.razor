@page "/inventory"

<div  class="note">
    Request available for <span>9:00 AM - 04:00 PM (Cannot request for items on Saturday and Sunday)</span>
</div>
<nav class="inventoryNav">
    <h1 class="navbar-brand mb-0 h1">Inventory</h1>
    <div class="buttons">
        <a class="btn btn-primary viewLog" type="button" href="/viewlog">
            <span class="oi oi-browser" /> View Log
        </a>
        <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
            <span class="oi oi-plus" /> Add
        </button>
    </div>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Items
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quanity
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Last taken out on
                </div>
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Items> itemList = _items;
            foreach (var inventoryItem in itemList)
            {
                <tr>

                    <td>@inventoryItem.ItemName</td>
                    <td>
                        <p class="small mb-0">
                            @inventoryItem.Quanity
                        </p>
                    </td>
                    <td>
                        @inventoryItem.LastTakenOut
                    </td>
                    <td>
                        <button class="btn btn-outline-secondary" type="button"
                            @onclick="()=>OpenEditItemDialog(inventoryItem)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(inventoryItem)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                        @{
                            if (canRequest == true)
                            {
                                <button class="btn request_button canRequest" type="button" @onclick="()=>OpenRequestItemDialog(inventoryItem)">
                                    <span class="oi oi-envelope" /> Request
                                </button>
                            }
                            else{
                                <button disabled class="btn request_button cannotRequest" type="button">
                                    <span class="oi oi-envelope" /> Request
                                </button>
                            }
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (_showAddItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnAddItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="number" class="form-control" @bind="_quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_addItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_addItemErrorMessage" />
        }
    </ModalDialog>
}
@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="number" class="form-control" @bind="_itemModel.Quanity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Cannot request at the moment" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
    </ModalDialog>
}

@if (_showRequestItemDialog)
{
    <ModalDialog Title="Request Item" OnClose="@OnRequestItemDialogClose" OkLabel="Request Item">
        <div class="form-floating">
            <input id="quantityTaken" type="number" class="form-control" @bind="_quantityTaken" placeholder="Item Quanity" />
            <label for="quantitytaken">Quantity</label>
        </div>
        <div class="form-floating">
            <input id="takenBy" type="text" class="form-control" @bind="_takenBy" placeholder="Taken By" />
            <label for="takenBy">Taken By</label>
        </div>

        @if (!string.IsNullOrEmpty(_requestItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_requestItemErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<Items> _items { get; set; }
    private List<User> _users { get; set; }
    private Items _itemModel { get; set; }
    private string _itemName { get; set; }
    private int _quantity { get; set; }
    private DateTime _lastTakenOut { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }

    //Add item
    private bool _showAddItemDialog { get; set; }
    private string _addItemErrorMessage { get; set; }

    // Edit item.
    private bool _showEditItemDialog { get; set; }
    private string _editItemErrorMessage { get; set; }

    // Delete item.
    private bool _showDeleteItemDialog { get; set; }
    private Items _deleteItem { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private string tempItemName;

    // Request item.
    private List<RequestItems> _requestItems { get; set; }
    private bool _showRequestItemDialog { get; set; }
    private int _quantityTaken { get; set; }
    private string _takenBy { get; set; }
    private string _requestItemErrorMessage { get; set; }
    private DateTime _dateTakenOut { get; set; }
    private int tempQuanity { get; set; }
    private bool canRequest = true;
    private DateTime checkCurrentTime;
    private DateTime checkCurrentDate;

    // View log.
    private List<ViewLogItems> _viewLogItems { get; set; }
    private DateTime _actionDate { get; set; }
    private string _actionPerformed { get; set; }
    private string _actionPerformer { get; set; }

    protected override void OnInitialized()
    {
        _items = InventoryService.GetAll();
        if ((checkCurrentDate.DayOfWeek == DayOfWeek.Sunday || checkCurrentDate.DayOfWeek == DayOfWeek.Saturday) || (checkCurrentTime.TimeOfDay < new TimeSpan(9, 0, 0) || checkCurrentTime.TimeOfDay > new TimeSpan(16, 0, 0)))
        {
            canRequest = false;
        }
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemName = "";
        _quantity = 0;
        _showAddItemDialog = true;
    }

    private void OnAddItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showAddItemDialog = false;
            _addItemErrorMessage = "";
        }
        else if (string.IsNullOrEmpty(_itemName))
        {
            _addItemErrorMessage = "Task name empty";
        }
        else if (_quantity <= 0)
        {
            _addItemErrorMessage = "Quanity must be more than 0";
        }
        else
        {
            try
            {

                _actionDate = DateTime.Now;
                _actionPerformed = "Added item";
                _addItemErrorMessage = "";
                _viewLogItems = ViewLogService.Create(_globalState.CurrentUser.Id, _itemName, _actionDate, _actionPerformed);
                _items = InventoryService.Create(_globalState.CurrentUser.Id, _itemName, _quantity, _lastTakenOut);
                _showAddItemDialog = false;
            }
            catch (Exception e)
            {
                _addItemErrorMessage = e.Message;
            }
        }
    }

    private void OpenEditItemDialog(Items editItem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";
        _itemModel = editItem;
        _showEditItemDialog = true;
    }

    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {

                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)
                {

                    _items = InventoryService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _itemModel.Quanity, _itemModel.LastTakenOut);
                }
                else
                {
                    _items = InventoryService.Update(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.Quanity, _itemModel.LastTakenOut);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }

    private void OpenDeleteItemDialog(Items item)
    {
        _deleteItem = item;
        _showDeleteItemDialog = true;
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        tempItemName = _itemName;
        if (isCancel)
        {
            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _actionDate = DateTime.Now;
                _actionPerformed = "Deleted item";
                _viewLogItems = ViewLogService.Create(_globalState.CurrentUser.Id, tempItemName, _actionDate, _actionPerformed);
                _deleteItemErrorMessage = "";
                _items = InventoryService.Delete(_globalState.CurrentUser.Id, _deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
    private void OpenRequestItemDialog(Items items)
    {
        _dialogTitle = "Request Item";
        _dialogOkLabel = "Request";
        _quantityTaken = 0;
        _takenBy = "";
        tempQuanity = items.Quanity;
        _itemModel = items;
        _showRequestItemDialog = true;
        _dateTakenOut = DateTime.Now;
    }
    private void OnRequestItemDialogClose(bool isCancel)
    {

        if (isCancel)
        {
            _showRequestItemDialog = false;
            _requestItemErrorMessage = "";
        }
        else if (_quantityTaken == 0)
        {
            _requestItemErrorMessage = "Quantity taken should me more than 0";
        }
        else if (_takenBy == "")
        {
            _requestItemErrorMessage = "Enter name of customer who took the item";
        }
        else if (_quantityTaken > tempQuanity)
        {
            _requestItemErrorMessage = "Not enough items in inventory";
        }
        else
        {
            try
            {
                _requestItemErrorMessage = "";
                _requestItems = RequestItemService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _quantityTaken, _takenBy, _dateTakenOut);
                _items = InventoryService.DecreaseQuanity(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.Quanity, _itemModel.LastTakenOut, _quantityTaken);
                _showRequestItemDialog = false;
            }
            catch (Exception e)
            {
                _requestItemErrorMessage = e.Message;
            }
        }
    }
}