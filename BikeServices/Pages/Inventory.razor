@page "/inventory"


@{
    // Condition to check the role of current user and display UI accordingly.
    if (currentUser == "admin")
    {
        <div class="note">
            Request available for <span>9:00 AM - 04:00 PM (Cannot request for items on Saturday and Sunday)</span>
        </div>
    }
}
<nav class="navbar ">
    <h1 class="navbar-brand mb-0 title">Inventory</h1>
    <div class="buttons">
        @{
            // Condition to check the role of current user and display UI accordingly.
            if (currentUser == "admin")
            {
                <a class="viewLog" type="button" href="/viewlog">
                    <span class="oi oi-list" /> View Log
                </a>

                <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
                    <span class="oi oi-plus" /> Add
                </button>
            }
        }
    </div>
</nav>

<table class="table">
    <thead class="table-header">
        <tr>
            <th>
                <div class="d-flex">
                    Items
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quanity
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Last taken out on
                </div>
            </th>
            <th>
            </th>
            <th>
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            // Read list of items to be used in foreach.
            IEnumerable<Items> itemList = _items;
            foreach (var inventoryItem in itemList)
            {
                <tr>
                    <td>@inventoryItem.ItemName</td>
                    <td>
                        <p class="small mb-0">
                            @inventoryItem.Quanity
                        </p>
                    </td>
                    <td>
                        @inventoryItem.LastTakenOut
                    </td>
                    <td>
                        @{
                            // Condition to check the role of current user and display UI accordingly.
                            if (currentUser == "admin")
                            {
                                <button class="btn btn-outline-secondary" type="button"
                                @onclick="()=>OpenEditItemDialog(inventoryItem)">
                                    <span class="oi oi-pencil" /> Edit
                                </button>
                                <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(inventoryItem)">
                                    <span class="oi oi-delete" /> Delete
                                </button>

                                // Condition to check if items can be requested
                                if (canRequest == false)
                                {
                                    <button class="btn request_button canRequest" type="button" @onclick="()=>OpenRequestItemDialog(inventoryItem)">
                                        <span class="oi oi-envelope" /> Request
                                    </button>
                                }
                                else
                                {
                                    <button disabled class="btn request_button cannotRequest" type="button">
                                        <span class="oi oi-envelope" /> Request
                                    </button>
                                }

                            }
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@*Condition to display model for adding items*@
@if (_showAddItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnAddItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="number" class="form-control" @bind="_quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_addItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_addItemErrorMessage" />
        }
    </ModalDialog>
}

@*Condition to display model for editing items*@
@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="tempEditItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="number" class="form-control" @bind="tempEditQuantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}

@*Condition to display model for deleting items*@
@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Cannot request at the moment" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
    </ModalDialog>
}

@*Condition to display model for requesting items*@
@if (_showRequestItemDialog)
{
    <ModalDialog Title="Request Item" OnClose="@OnRequestItemDialogClose" OkLabel="Request Item">
        <div class="form-floating">
            <input id="quantityTaken" type="number" class="form-control" @bind="_quantityTaken" placeholder="Item Quanity" />
            <label for="quantitytaken">Quantity</label>
        </div>
        <div class="form-floating">
            <input id="takenBy" type="text" class="form-control" @bind="_takenBy" placeholder="Taken By" />
            <label for="takenBy">Taken By</label>
        </div>

        @if (!string.IsNullOrEmpty(_requestItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_requestItemErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<Items> _items { get; set; }
    private List<User> _users { get; set; }
    private Items _itemModel { get; set; }
    private string _itemName { get; set; }
    private int _quantity { get; set; }
    private DateTime _lastTakenOut { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    public string currentUser = "staff";

    // Variables for Adding item
    private bool _showAddItemDialog { get; set; }
    private string _addItemErrorMessage { get; set; }
    public string lastTakenOut { get; set; }

    // Variables for editing item.
    private bool _showEditItemDialog { get; set; }
    private string _editItemErrorMessage { get; set; }
    public string tempEditItemName { get; set; }
    public int tempEditQuantity { get; set; }
    public bool canEdit = true;

    // Variables for deleting item.
    private bool _showDeleteItemDialog { get; set; }
    private Items _deleteItem { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private string tempItemName;

    // Variables for requesting item.
    private List<RequestItems> _requestItems { get; set; }
    private bool _showRequestItemDialog { get; set; }
    private int _quantityTaken { get; set; }
    private string _takenBy { get; set; }
    private string _requestItemErrorMessage { get; set; }
    private DateTime _dateTakenOut { get; set; }
    private int tempQuanity { get; set; }
    private bool canRequest = true;
    private DateTime checkCurrentTime;
    private DateTime checkCurrentDate;
    public string tempUser { get; set; }

    // Variables for viewing log item.
    private List<ViewLogItems> _viewLogItems { get; set; }
    private DateTime _actionDate { get; set; }
    private string _actionPerformed { get; set; }
    private string _actionPerformer { get; set; }

    protected override void OnInitialized()
    {
        _items = InventoryService.GetAll();
        _users = UserService.GetAll();

        // Condition to check the day of week and time of day for requesting items.
        if ((checkCurrentDate.DayOfWeek == DayOfWeek.Sunday || checkCurrentDate.DayOfWeek == DayOfWeek.Saturday) || (checkCurrentTime.TimeOfDay < new TimeSpan(9, 0, 0) || checkCurrentTime.TimeOfDay > new TimeSpan(16, 0, 0)))
        {
            canRequest = false;
        }

        // Condition to check the role of current user
        if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == Role.Admin)
        {
            currentUser = "admin";
        }
        else
        {
            currentUser = "staff";
        }

    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemName = "";
        _quantity = 0;
        _showAddItemDialog = true;
    }

    private void OnAddItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showAddItemDialog = false;
            _addItemErrorMessage = "";
        }
        else if (string.IsNullOrEmpty(_itemName))
        {
            _addItemErrorMessage = "Task name empty";
        }
        else if (_quantity <= 0)
        {
            _addItemErrorMessage = "Quanity must be more than 0";
        }
        else
        {
            try
            {
                _actionDate = DateTime.Now;
                _actionPerformed = "Added item";
                _addItemErrorMessage = "";

                // Creating log when adding an item
                _viewLogItems = ViewLogService.Create(_globalState.CurrentUser.Id, _itemName, _actionDate, _actionPerformed);

                // Creating items that have been added by admin
                _items = InventoryService.Create(_globalState.CurrentUser.Id, _itemName, _quantity);
                _showAddItemDialog = false;
            }
            catch (Exception e)
            {
                _addItemErrorMessage = e.Message;
            }
        }
    }

    private void OpenEditItemDialog(Items editItem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";
        _itemModel = editItem;
        _showEditItemDialog = true;
        tempEditItemName = _itemModel.ItemName;
        tempEditQuantity = _itemModel.Quanity;
    }

    private void OnEditItemDialogClose(bool isCancel)
    {
        _editItemErrorMessage = "";
        canEdit = true;
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else if (tempEditQuantity < 0)
        {
            _editItemErrorMessage = "Quantity cannot be less than 0";
            canEdit = false;
        }
        else if (string.IsNullOrEmpty(tempEditItemName))
        {
            _editItemErrorMessage = "Item name cannot be blank";
            canEdit = false;
        }
        else
        {
            try
            {

                if (_itemModel.Id == Guid.Empty)
                {
                    // Creating new item if the item model does not exist.
                    _items = InventoryService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _itemModel.Quanity);
                }
                else if (canEdit == false)
                {
                    // Updating item in a way, changes are not applied on close
                    _items = InventoryService.Update(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.Quanity);
                }
                else
                {
                    // Updating items after editing
                    _items = InventoryService.Update(_globalState.CurrentUser.Id, _itemModel.Id, tempEditItemName, tempEditQuantity);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }

    private void OpenDeleteItemDialog(Items item)
    {
        _deleteItem = item;
        _showDeleteItemDialog = true;
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        tempItemName = _itemName;
        if (isCancel)
        {
            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _actionDate = DateTime.Now;
                _actionPerformed = "Deleted item";

                // Creating new log when deleting items
                _viewLogItems = ViewLogService.Create(_globalState.CurrentUser.Id, tempItemName, _actionDate, _actionPerformed);
                _deleteItemErrorMessage = "";

                // Deleting items 
                _items = InventoryService.Delete(_globalState.CurrentUser.Id, _deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }

    private void OpenRequestItemDialog(Items items)
    {
        _dialogTitle = "Request Item";
        _dialogOkLabel = "Request";
        _quantityTaken = 0;
        _takenBy = "";
        tempQuanity = items.Quanity;
        _itemModel = items;
        _showRequestItemDialog = true;
        _dateTakenOut = DateTime.Now;
    }

    private void OnRequestItemDialogClose(bool isCancel)
    {
        var staffs = UserService.GetAll().Where(t => t.Username.ToLower().Equals(_takenBy.ToLower()));
        foreach (var user in _users)
        {
            if (_takenBy.ToLower() == user.Username.ToLower())
            {
                tempUser = user.Username;
            }
        }
        if (isCancel)
        {
            _showRequestItemDialog = false;
            _requestItemErrorMessage = "";
        }
        else if (_quantityTaken == 0)
        {
            _requestItemErrorMessage = "Quantity taken should me more than 0";
        }
        else if (_takenBy == "")
        {
            _requestItemErrorMessage = "Enter name of customer who took the item";
        }
        else if (!staffs.Any())
        {
            _requestItemErrorMessage = "Staff does not exist";
        }
        else if (_quantityTaken > tempQuanity)
        {
            _requestItemErrorMessage = "Not enough items in inventory";
        }
        else
        {
            lastTakenOut = _dateTakenOut.ToString("MMM dd, yyyy");
            try
            {
                _requestItemErrorMessage = "";

                // Creating a requested item log when items are requested
                _requestItems = RequestItemService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _quantityTaken, tempUser, _dateTakenOut);

                // Updating items in inventory according to the request
                _items = InventoryService.ChangeOnRequest(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, lastTakenOut, _quantityTaken);
                _showRequestItemDialog = false;
            }
            catch (Exception e)
            {
                _requestItemErrorMessage = e.Message;
            }
        }
    }
    }